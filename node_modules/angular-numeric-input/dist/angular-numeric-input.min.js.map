{"version":3,"sources":["angular-numeric-input.min.js"],"names":["angular","module","directive","$filter","restrict","require","link","scope","el","attrs","ngModelCtrl","round","value","num","parseFloat","d","Math","pow","precision","formatPrecision","toFixed","getCommaCount","length","matchResult","match","formatViewValue","$isEmpty","formatToNumber","numberLength","minValidator","invalid","minNotEqual","min","$setValidity","maxValidator","maxNotEqual","max","lastValidValue","dotSuffix","firstDecimalZero","NUMBER_REGEXP","positiveInteger","maxLength","allowDecimal","$parsers","push","input","isUndefined","replace","lastChar","substr","indexOf","test","empty","$setViewValue","$render","$formatters","$observe","$modelValue","isDefined","val","viewValue","start","selectionStart","end","selectionEnd","oldViewValue","$viewValue","setSelectionRange"],"mappings":"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","file":"angular-numeric-input.min.js","sourcesContent":["(function() {\r\n    'use strict';\r\n\r\n    angular.module('ui.numericInput', [])\r\n        .directive('uiNumericInput', ['$filter', function($filter) {\r\n            return {\r\n                restrict: 'A',\r\n                require: 'ngModel',\r\n                link: function(scope, el, attrs, ngModelCtrl) {\r\n                    var NUMBER_REGEXP = /^\\s*[-+]?(\\d+|\\d*\\.\\d*)\\s*$/,\r\n                        min = 1,\r\n                        max,\r\n                        lastValidValue,\r\n                        dotSuffix,\r\n                        firstDecimalZero,\r\n                        positiveInteger = true,\r\n                        minNotEqual,\r\n                        maxNotEqual,\r\n                        maxLength = 9,\r\n                        precision = 0;\r\n\r\n                    if (attrs.maxLength >= 1) {\r\n                        maxLength = attrs.maxLength;\r\n                    }\r\n\r\n                    if (attrs.allowDecimal) {\r\n                        positiveInteger = false;\r\n                        precision = 2;\r\n                        min = 0;\r\n                    }\r\n\r\n                    if (attrs.minNotEqual) {\r\n                        minNotEqual = true;\r\n                    }\r\n\r\n                    if (attrs.maxNotEqual) {\r\n                        maxNotEqual = true;\r\n                    }\r\n\r\n                    /**\r\n                     * Returns a rounded number in the precision setup by the directive\r\n                     * @param  {Number} num Number to be rounded\r\n                     * @return {Number}     Rounded number\r\n                     */\r\n                    function round(value) {\r\n                        var num = parseFloat(value);\r\n                        var d = Math.pow(10, precision);\r\n                        return Math.round(num * d) / d;\r\n                    }\r\n\r\n                    /**\r\n                     * Returns a string that represents the rounded number\r\n                     * @param  {Number} value Number to be rounded\r\n                     * @return {String}       The string representation\r\n                     */\r\n                    function formatPrecision(value) {\r\n                        return parseFloat(value).toFixed(precision);\r\n                    }\r\n\r\n                    function getCommaCount(value) {\r\n                        var length = 0;\r\n                        var matchResult = (value + '').match(/,/g);\r\n                        if (matchResult) {\r\n                            length = matchResult.length;\r\n                        }\r\n                        return length;\r\n                    }\r\n\r\n                    //Convert to String\r\n                    function formatViewValue(value) {\r\n                        return ngModelCtrl.$isEmpty(value) ? '' : '' + value;\r\n                    }\r\n\r\n                    function formatToNumber(value) {\r\n                        return $filter('number')(value);\r\n                    }\r\n\r\n                    function numberLength(value) {\r\n                        var length = 0;\r\n                        var matchResult = (value + '').match(/\\d/g);\r\n                        if (matchResult) {\r\n                            length = matchResult.length;\r\n                        }\r\n                        return length;\r\n                    }\r\n\r\n                    function minValidator(value) {\r\n                        var invalid = minNotEqual ? value <= min : value < min;\r\n                        if (!ngModelCtrl.$isEmpty(value) && invalid) {\r\n                            ngModelCtrl.$setValidity('min', false);\r\n                        } else {\r\n                            ngModelCtrl.$setValidity('min', true);\r\n                        }\r\n                        return value;\r\n                    }\r\n\r\n                    function maxValidator(value) {\r\n                        var invalid = maxNotEqual ? value >= max : value > max;\r\n                        if (!ngModelCtrl.$isEmpty(value) && invalid) {\r\n                            ngModelCtrl.$setValidity('max', false);\r\n                        } else {\r\n                            ngModelCtrl.$setValidity('max', true);\r\n\r\n                        }\r\n                        return value;\r\n                    }\r\n\r\n                    ngModelCtrl.$parsers.push(function(input) {\r\n                        //check undefined and NaN\r\n                        //http://adripofjavascript.com/blog/drips/the-problem-with-testing-for-nan-in-javascript.html\r\n                        if (angular.isUndefined(input) || (input !== input)) {\r\n                            input = '';\r\n                        }\r\n\r\n                        var value = input.replace(/\\,/g, '');\r\n                        var lastChar = value.substr(value.length - 1);\r\n                        if (!positiveInteger) {\r\n                            dotSuffix = lastChar === '.' ? true : false;\r\n                        }\r\n                        \r\n                        // Handle leading decimal point, like \".5\"\r\n                        if (value.indexOf('.') === 0) {\r\n                            value = '0' + value;\r\n                        }\r\n\r\n                        firstDecimalZero = /\\d*\\.0$/.test(value);\r\n\r\n                        var empty = ngModelCtrl.$isEmpty(value);\r\n                        if (empty || (NUMBER_REGEXP.test(value) && numberLength(value) <= maxLength)) {\r\n                            lastValidValue = (value === '') ? null : (empty ? value : round(value));\r\n                        } else {\r\n                            // Render the last valid input in the field\r\n                            ngModelCtrl.$setViewValue(formatViewValue(lastValidValue));\r\n                            ngModelCtrl.$render();\r\n                        }\r\n                        ngModelCtrl.$setValidity('numeric', !dotSuffix);\r\n                        return lastValidValue;\r\n                    });\r\n\r\n                    ngModelCtrl.$formatters.push(formatToNumber);\r\n\r\n                    // Min validation (optional)\r\n                    attrs.$observe('min', function(value) {\r\n                        min = parseFloat(value || min);\r\n                        minValidator(ngModelCtrl.$modelValue);\r\n                    });\r\n\r\n                    ngModelCtrl.$parsers.push(minValidator);\r\n                    ngModelCtrl.$formatters.push(minValidator);\r\n\r\n                    // Max validation (optional)\r\n                    if (angular.isDefined(attrs.max)) {\r\n                        attrs.$observe('max', function(val) {\r\n                            max = parseFloat(val);\r\n                            maxValidator(ngModelCtrl.$modelValue);\r\n                        });\r\n                        ngModelCtrl.$parsers.push(maxValidator);\r\n                        ngModelCtrl.$formatters.push(maxValidator);\r\n                    }\r\n\r\n                    ngModelCtrl.$formatters.push(function(value) {\r\n                        return value ? formatPrecision(value) : value;\r\n                    });\r\n\r\n                    //Formatting must be the last of $parser pipeline\r\n                    ngModelCtrl.$parsers.push(function(value) {\r\n                        //This section is for decimal values if positiveInteger flag is false\r\n                        var viewValue = formatToNumber(value);\r\n                        if (!positiveInteger && dotSuffix) {\r\n                            viewValue += '.';\r\n                        }\r\n                        if (!positiveInteger && firstDecimalZero) {\r\n                            viewValue += '.0';\r\n                        }\r\n                        //This logic is used to preserve cursor position after formatting\r\n                        var start = el[0].selectionStart,\r\n                            end = el[0].selectionEnd,\r\n                            oldViewValue = ngModelCtrl.$viewValue;\r\n                        if (getCommaCount(oldViewValue) > getCommaCount(viewValue)) {\r\n                            start--;\r\n                            end--;\r\n                        }\r\n                        if (getCommaCount(oldViewValue) < getCommaCount(viewValue)) {\r\n                            start++;\r\n                            end++;\r\n                        }\r\n                        //Do not use $setViewValue to set viewValue here, because it will trigger $parse pipeline.\r\n                        ngModelCtrl.$viewValue = viewValue;\r\n                        ngModelCtrl.$render();\r\n                        el[0].setSelectionRange(start, end);\r\n                        return value;\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n})();"]}